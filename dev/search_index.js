var documenterSearchIndex = {"docs":
[{"location":"#Data-types","page":"Home","title":"Data types","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"In order to implement a new dataset based CommonDataModel.jl one has to create two types derived from:","category":"page"},{"location":"","page":"Home","title":"Home","text":"AbstractVariable: a variable with named dimension and metadata\nAbstractDataset: a collection of variable with named dimension, metadata and sub-groups. The sub-groups are also AbstractDataset.","category":"page"},{"location":"","page":"Home","title":"Home","text":"CommonDataModel.jl also provides a type CFVariable which wraps a type derived from AbstractVariable and applies the scaling described in cfvariable.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Overview of methods:","category":"page"},{"location":"","page":"Home","title":"Home","text":" get names get values write / set value\nDimensions dimnames dim defDim\nAttributes attribnames attrib defAttrib\nVariables varnames variable defVar\nGroups groupnames group defGroup","category":"page"},{"location":"","page":"Home","title":"Home","text":"For read-only datasets, the methods in last column are not implemented.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [CommonDataModel]","category":"page"},{"location":"#CommonDataModel.AbstractDataset","page":"Home","title":"CommonDataModel.AbstractDataset","text":"AbstractDataset is a collection of multidimensional variables (for example a NetCDF or GRIB file)\n\nA data set ds of a type derived from AbstractDataset should implemented at minimum:\n\nBase.key(ds): return a list of variable names as strings\nvariable(ds,varname::String): return an array-like data structure (derived from AbstractVariable) of the variables corresponding to varname. This array-like data structure should follow the CF semantics.\ndimnames(ds): should be an iterable with all dimension names in the data set  ds\ndim(ds,name): dimension value corresponding to name\n\nOptionally a data set can have attributes and groups:\n\nattribnames(ds): should be an iterable with all attribute names\nattrib(ds,name): attribute value corresponding to name\ngroupnames(ds): should be an iterable with all group names\ngroup(ds,name): group corresponding to the name\n\nFor a writable-dataset, one should also implement:\n\ndefDim: define a dimension\ndefAttrib: define a attribute\ndefVar: define a variable\ndefGroup: define a group\n\n\n\n\n\n","category":"type"},{"location":"#CommonDataModel.AbstractVariable","page":"Home","title":"CommonDataModel.AbstractVariable","text":"AbstractVariable{T,N} is a subclass of AbstractArray{T, N}. A variable v of a type derived from AbstractVariable should implement:\n\nname(v): should be the name of variable within the data set\ndimnames(v): should be a iterable data structure with all dimension names of the variable v\ndataset(v): the parent dataset containing v\nBase.size(v): the size of the variable\nBase.getindex(v,indices...): get the data of v at the provided indices\n\nOptionally a variable can have attributes:\n\nattribnames(v): should be an iterable with all attribute names\nattrib(v,name): attribute value corresponding to name\n\nFor a writable-dataset, one should also implement:\n\ndefAttrib: define a attribute\nBase.setindex!(v,data,indices...): set the data in v at the provided indices\n\n\n\n\n\n","category":"type"},{"location":"#CommonDataModel.Attributes","page":"Home","title":"CommonDataModel.Attributes","text":"A collection of attributes with a Dict-like interface dispatching to attribnames, attrib, defAttrib for keys, getindex and setindex! respectively.\n\n\n\n\n\n","category":"type"},{"location":"#CommonDataModel.Dimensions","page":"Home","title":"CommonDataModel.Dimensions","text":"A collection of dimensions with a Dict-like interface dispatching to dimnames, dim, defDim for keys, getindex and setindex! respectively.\n\n\n\n\n\n","category":"type"},{"location":"#CommonDataModel.Groups","page":"Home","title":"CommonDataModel.Groups","text":"A collection of groups with a Dict-like interface dispatching to groupnames and group for keys and getindex respectively.\n\n\n\n\n\n","category":"type"},{"location":"#Base.filter-Tuple{CommonDataModel.AbstractVariable, Vararg{Any}}","page":"Home","title":"Base.filter","text":"data = filter(ncv, indices...; accepted_status_flags = nothing)\n\nLoad and filter observations by replacing all variables without an acepted status flag to missing. It is used the attribute ancillary_variables to identify the status flag.\n\n# da[\"data\"] is 2D matrix\ngood_data = NCDatasets.filter(ds[\"data\"],:,:, accepted_status_flags = [\"good_data\",\"probably_good_data\"])\n\n\n\n\n\n","category":"method"},{"location":"#Base.getindex-Tuple{CommonDataModel.Attributes, Any}","page":"Home","title":"Base.getindex","text":"getindex(a::Attributes,name::SymbolOrString)\n\nReturn the value of the attribute called name from the attribute list a. Generally the attributes are loaded by indexing, for example:\n\nusing NCDatasets\nds = NCDataset(\"file.nc\")\ntitle = ds.attrib[\"title\"]\n\n\n\n\n\n","category":"method"},{"location":"#Base.keys-Tuple{CommonDataModel.Attributes}","page":"Home","title":"Base.keys","text":"Base.keys(a::Attributes)\n\nReturn a list of the names of all attributes.\n\n\n\n\n\n","category":"method"},{"location":"#Base.setindex!-Tuple{CommonDataModel.Attributes, Any, Any}","page":"Home","title":"Base.setindex!","text":"Base.setindex!(a::Attributes,data,name::SymbolOrString)\n\nSet the attribute called name to the value data in the attribute list a. data can be a vector or a scalar. A scalar is handeld as a vector with one element in the NetCDF data model.\n\nGenerally the attributes are defined by indexing, for example:\n\nds = NCDataset(\"file.nc\",\"c\")\nds.attrib[\"title\"] = \"my title\"\nclose(ds)\n\n\n\n\n\n","category":"method"},{"location":"#Base.size-Tuple{CommonDataModel.CFVariable}","page":"Home","title":"Base.size","text":"sz = size(var::CFVariable)\n\nReturn a tuple of integers with the size of the variable var.\n\nnote: Note\nNote that the size of a variable can change, i.e. for a variable with an unlimited dimension.\n\n\n\n\n\n","category":"method"},{"location":"#CommonDataModel._getattrib-NTuple{5, Any}","page":"Home","title":"CommonDataModel._getattrib","text":"_getattrib(ds,v,parentname,attribname,default)\n\nGet an attribute, looking also at the parent variable name (linked via the bounds attribute as following the CF conventions). The default value is returned if the attribute cannot be found.\n\n\n\n\n\n","category":"method"},{"location":"#CommonDataModel.ancillaryvariables-Tuple{CommonDataModel.CFVariable, Any}","page":"Home","title":"CommonDataModel.ancillaryvariables","text":"ncvar = NCDatasets.ancillaryvariables(ncv::NCDatasets.CFVariable,modifier)\n\nReturn the first ancillary variables from the NetCDF variable ncv with the standard name modifier modifier. It can be used for example to access related variable like status flags.\n\n\n\n\n\n","category":"method"},{"location":"#CommonDataModel.attrib-Tuple{Union{CommonDataModel.AbstractDataset, CommonDataModel.AbstractVariable}, Union{AbstractString, Symbol}}","page":"Home","title":"CommonDataModel.attrib","text":"CommonDatamodel.attrib(ds::Union{AbstractDataset,AbstractVariable},attribname::SymbolOrString)\n\nReturn the value of the attribute attribname in the data set ds.\n\n\n\n\n\n","category":"method"},{"location":"#CommonDataModel.attribnames-Tuple{Union{CommonDataModel.AbstractDataset, CommonDataModel.AbstractVariable}}","page":"Home","title":"CommonDataModel.attribnames","text":"CommonDatamodel.attribnames(ds::Union{AbstractDataset,AbstractVariable})\n\nReturn an iterable of all attribute names in ds.\n\n\n\n\n\n","category":"method"},{"location":"#CommonDataModel.bounds-Tuple{CommonDataModel.CFVariable}","page":"Home","title":"CommonDataModel.bounds","text":"b = bounds(ncvar::NCDatasets.CFVariable)\n\nReturn the CFVariable corresponding to the bounds attribute of the variable ncvar. The time units and calendar from the ncvar are used but not the attributes controling the packing of data scale_factor, add_offset and _FillValue.\n\n\n\n\n\n","category":"method"},{"location":"#CommonDataModel.cfvariable-Tuple{Any, Any}","page":"Home","title":"CommonDataModel.cfvariable","text":"v = cfvariable(ds::NCDataset,varname::SymbolOrString; <attrib> = <value>)\n\nReturn the variable varname in the dataset ds as a NCDataset.CFVariable. The keyword argument <attrib> are the attributes (fillvalue, missing_value, scale_factor, add_offset, units and calendar) relevant to the CF conventions. By specifing the value of these attributes, the one can override the value specified in the data set. If the attribute is set to nothing, then the attribute is not loaded and the corresponding transformation is ignored. This function is similar to ds[varname] with the additional flexibility that some variable attributes can be overridden.\n\nExample:\n\nNCDataset(\"foo.nc\",\"c\") do ds\n  defVar(ds,\"data\",[10., 11., 12., 13.], (\"time\",), attrib = Dict(\n      \"add_offset\" => 10.,\n      \"scale_factor\" => 0.2))\nend\n\n# The stored (packed) valued are [0., 5., 10., 15.]\n# since 0.2 .* [0., 5., 10., 15.] .+ 10 is [10., 11., 12., 13.]\n\nds = NCDataset(\"foo.nc\");\n\n@show ds[\"data\"].var[:]\n# returns [0., 5., 10., 15.]\n\n@show cfvariable(ds,\"data\")[:]\n# returns [10., 11., 12., 13.]\n\n# neither add_offset nor scale_factor are applied\n@show cfvariable(ds,\"data\", add_offset = nothing, scale_factor = nothing)[:]\n# returns [0, 5, 10, 15]\n\n# add_offset is applied but not scale_factor\n@show cfvariable(ds,\"data\", scale_factor = nothing)[:]\n# returns [10, 15, 20, 25]\n\n# 0 is declared as the fill value (add_offset and scale_factor are applied as usual)\n@show cfvariable(ds,\"data\", fillvalue = 0)[:]\n# return [missing, 11., 12., 13.]\n\n# Use the time units: days since 2000-01-01\n@show cfvariable(ds,\"data\", units = \"days since 2000-01-01\")[:]\n# returns [DateTime(2000,1,11), DateTime(2000,1,12), DateTime(2000,1,13), DateTime(2000,1,14)]\n\nclose(ds)\n\n\n\n\n\n","category":"method"},{"location":"#CommonDataModel.coord-Tuple{CommonDataModel.AbstractVariable, Any}","page":"Home","title":"CommonDataModel.coord","text":"cv = coord(v::Union{CFVariable,Variable},standard_name)\n\nFind the coordinate of the variable v by the standard name standard_name or some standardized heuristics based on units. If the heuristics fail to detect the coordinate, consider to modify the netCDF file to add the standard_name attribute. All dimensions of the coordinate must also be dimensions of the variable v.\n\nExample\n\nusing NCDatasets\nds = NCDataset(\"file.nc\")\nncv = ds[\"SST\"]\nlon = coord(ncv,\"longitude\")[:]\nlat = coord(ncv,\"latitude\")[:]\nv = ncv[:]\nclose(ds)\n\n\n\n\n\n","category":"method"},{"location":"#CommonDataModel.dataset-Tuple{CommonDataModel.AbstractVariable}","page":"Home","title":"CommonDataModel.dataset","text":"ds = CommonDataModel.dataset(v::AbstractVariable)\n\nReturn the data set ds to which a the variable v belongs to.\n\n\n\n\n\n","category":"method"},{"location":"#CommonDataModel.defAttrib-Tuple{CommonDataModel.AbstractDataset, Union{AbstractString, Symbol}, Any}","page":"Home","title":"CommonDataModel.defAttrib","text":"CommonDatamodel.defAttrib(ds::Union{AbstractDataset,AbstractVariable},name::SymbolOrString,data)\n\nCreate an attribute with the name attrib in the data set or variable ds.\n\n\n\n\n\n","category":"method"},{"location":"#CommonDataModel.defDim-Tuple{CommonDataModel.AbstractDataset, Union{AbstractString, Symbol}, Any}","page":"Home","title":"CommonDataModel.defDim","text":"CommonDatamodel.defDim(ds::AbstractDataset,name::SymbolOrString,len)\n\nCreate dimension with the name name in the data set ds with the length len. len can be Inf for unlimited dimensions.\n\n\n\n\n\n","category":"method"},{"location":"#CommonDataModel.defGroup-Tuple{CommonDataModel.AbstractDataset, Union{AbstractString, Symbol}}","page":"Home","title":"CommonDataModel.defGroup","text":"group = CommonDatamodel.defGroup(ds::AbstractDataset,name::SymbolOrString)\n\nCreate an empty sub-group with the name name in the data set ds. The group is a sub-type of AbstractDataset.\n\n\n\n\n\n","category":"method"},{"location":"#CommonDataModel.defVar-Tuple{CommonDataModel.AbstractDataset, CommonDataModel.AbstractVariable}","page":"Home","title":"CommonDataModel.defVar","text":"v = CommonDataModel.defVar(ds::AbstractDataset,src::AbstractVariable)\n\nDefines and return the variable in the data set ds copied from the variable src. The variable name, dimension name, attributes and data are copied from src.\n\n\n\n\n\n","category":"method"},{"location":"#CommonDataModel.dim-Tuple{CommonDataModel.AbstractVariable, Union{AbstractString, Symbol}}","page":"Home","title":"CommonDataModel.dim","text":"CommonDatamodel.dim(ds::AbstractDataset,dimname::SymbolOrString)\n\nReturn the length of the dimension dimname in the data set ds.\n\n\n\n\n\n","category":"method"},{"location":"#CommonDataModel.dimnames-Tuple{CommonDataModel.AbstractVariable}","page":"Home","title":"CommonDataModel.dimnames","text":"CommonDataModel.dimnames(v::AbstractVariable)\n\nReturn an iterable of the dimension names of the variable v.\n\n\n\n\n\n","category":"method"},{"location":"#CommonDataModel.dimnames-Tuple{Union{CommonDataModel.AbstractDataset, CommonDataModel.AbstractVariable}}","page":"Home","title":"CommonDataModel.dimnames","text":"CommonDatamodel.dimnames(ds::AbstractDataset)\n\nReturn an iterable of all dimension names in ds. This information can also be accessed using the property ds.dim:\n\nExamples\n\nds = NCDataset(\"results.nc\", \"r\");\ndimnames = keys(ds.dim)\n\n\n\n\n\n","category":"method"},{"location":"#CommonDataModel.dims-Tuple{Union{CommonDataModel.AbstractDataset, CommonDataModel.AbstractVariable}}","page":"Home","title":"CommonDataModel.dims","text":"CommonDatamodel.dims(ds::Union{AbstractDataset,AbstractVariable})\n\nReturn a dict-like of all dimensions and their corresponding length defined in the the data set ds (or variable).\n\n\n\n\n\n","category":"method"},{"location":"#CommonDataModel.group-Tuple{CommonDataModel.AbstractDataset, Union{AbstractString, Symbol}}","page":"Home","title":"CommonDataModel.group","text":"CommonDatamodel.group(ds::AbstractDataset,groupname::SymbolOrString)\n\nReturn the sub-group data set with the name groupname.\n\n\n\n\n\n","category":"method"},{"location":"#CommonDataModel.groupnames-Tuple{CommonDataModel.AbstractDataset}","page":"Home","title":"CommonDataModel.groupnames","text":"CommonDatamodel.groupnames(ds::AbstractDataset)\n\nAll the subgroup names of the data set ds. For a data set containing only a single group, this will be an empty vector of String.\n\n\n\n\n\n","category":"method"},{"location":"#CommonDataModel.groups-Tuple{CommonDataModel.AbstractDataset}","page":"Home","title":"CommonDataModel.groups","text":"CommonDatamodel.groups(ds::AbstractDataset)\n\nReturn all sub-group data as a dict-like object.\n\n\n\n\n\n","category":"method"},{"location":"#CommonDataModel.name-Tuple{CommonDataModel.AbstractDataset}","page":"Home","title":"CommonDataModel.name","text":"CommonDatamodel.name(ds::AbstractDataset)\n\nName of the group of the data set ds. For a data set containing only a single group, this will be always the root group \"/\".\n\n\n\n\n\n","category":"method"},{"location":"#CommonDataModel.name-Tuple{CommonDataModel.AbstractVariable}","page":"Home","title":"CommonDataModel.name","text":"CommonDataModel.name(v::AbstractVariable)\n\nReturn the name of the variable v as a string.\n\n\n\n\n\n","category":"method"},{"location":"#CommonDataModel.path-Tuple{CommonDataModel.AbstractDataset}","page":"Home","title":"CommonDataModel.path","text":"CommonDatamodel.path(ds::AbstractDataset)\n\nFile path of the data set ds.\n\n\n\n\n\n","category":"method"},{"location":"#CommonDataModel.set_attribute_color-Tuple{Symbol}","page":"Home","title":"CommonDataModel.set_attribute_color","text":"    CommonDataModel.set_attribute_color(color::Symbol)\n\nSet the attribute color. The default color is cyan.\n\n\n\n\n\n","category":"method"},{"location":"#CommonDataModel.set_section_color-Tuple{Symbol}","page":"Home","title":"CommonDataModel.set_section_color","text":"    CommonDataModel.set_section_color(color::Symbol)\n\nSet the section color. The default color is red.\n\n\n\n\n\n","category":"method"},{"location":"#CommonDataModel.set_variable_color-Tuple{Symbol}","page":"Home","title":"CommonDataModel.set_variable_color","text":"    CommonDataModel.set_variable_color(color::Symbol)\n\nSet the variable color. The default color is green.\n\n\n\n\n\n","category":"method"},{"location":"#CommonDataModel.show_attrib-Tuple{Any, Any}","page":"Home","title":"CommonDataModel.show_attrib","text":"CommonDatamodel.show_attrib(io,a)\n\nPrint a list all attributes (key/values pairs) in a to IO stream io. The IO property :level is used for indentation.\n\n\n\n\n\n","category":"method"},{"location":"#CommonDataModel.show_dim-Tuple{IO, Any}","page":"Home","title":"CommonDataModel.show_dim","text":"CommonDatamodel.show_dim(io,dim)\n\nPrint a list all dimensions (key/values pairs where key is the dimension names and value the corresponding length) in dim to IO stream io. The IO property :level is used for indentation.\n\n\n\n\n\n","category":"method"},{"location":"#CommonDataModel.time_factor-Tuple{CommonDataModel.CFVariable}","page":"Home","title":"CommonDataModel.time_factor","text":"tf = CommonDataModel.time_factor(v::CFVariable)\n\nThe time unit in milliseconds. E.g. seconds would be 1000., days would be 86400000. The result can also be nothing if the variable has no time units.\n\n\n\n\n\n","category":"method"},{"location":"#CommonDataModel.unlimited-Tuple{CommonDataModel.AbstractDataset}","page":"Home","title":"CommonDataModel.unlimited","text":"CommonDatamodel.unlimited(ds::AbstractDataset)\n\nIterator of strings with the name of the unlimited dimension.\n\n\n\n\n\n","category":"method"},{"location":"#CommonDataModel.varbyattrib-Tuple{Union{CommonDataModel.AbstractDataset, CommonDataModel.AbstractVariable}}","page":"Home","title":"CommonDataModel.varbyattrib","text":"varbyattrib(ds, attname = attval)\n\nReturns a list of variable(s) which has the attribute attname matching the value attval in the dataset ds. The list is empty if the none of the variables has the match. The output is a list of CFVariables.\n\nExamples\n\nLoad all the data of the first variable with standard name \"longitude\" from the NetCDF file results.nc.\n\njulia> ds = NCDataset(\"results.nc\", \"r\");\njulia> data = varbyattrib(ds, standard_name = \"longitude\")[1][:]\n\n\n\n\n\n","category":"method"},{"location":"#CommonDataModel.variable-Tuple{CommonDataModel.AbstractDataset, Union{AbstractString, Symbol}}","page":"Home","title":"CommonDataModel.variable","text":"CommonDataModel.variable(ds::AbstractDataset,variablename::SymbolOrString)\n\nReturn the variable with the name variablename from the data set ds.\n\n\n\n\n\n","category":"method"},{"location":"#CommonDataModel.varnames-Tuple{CommonDataModel.AbstractDataset}","page":"Home","title":"CommonDataModel.varnames","text":"CommonDataModel.varnames(ds::AbstractDataset)\n\nReturn an iterable of all the variable name.\n\n\n\n\n\n","category":"method"}]
}
