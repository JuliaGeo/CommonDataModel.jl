var documenterSearchIndex = {"docs":
[{"location":"#Abstract-types","page":"Home","title":"Abstract types","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Overview of methods","category":"page"},{"location":"","page":"Home","title":"Home","text":" get names get value write / set value\nDimensions dimnames dim defDim\nAttributes attribnames attrib defAttrib\nVariables varnames variable defVar\nGroups groupnames group defGroup","category":"page"},{"location":"","page":"Home","title":"Home","text":"For read-only datasets, the methods in last column are not implemented.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [CommonDataModel]","category":"page"},{"location":"#CommonDataModel.AbstractDataset","page":"Home","title":"CommonDataModel.AbstractDataset","text":"AbstractDataset is a collection of multidimensional variables (for example a NetCDF or GRIB file)\n\nA data set ds of a type derived from AbstractDataset should implemented at minimum:\n\nBase.key(ds): return a list of variable names a strings\nBase.getindex(ds,varname::String): return an array-like data structure (derived from AbstractVariable) of the variables corresponding to varname. This array-like data structure should follow the CF semantics.\nattribnames(ds): should be an iterable with all attribute names\nattrib(ds,name): attribute value corresponding to name\ndimnames(ds): should be an iterable with all dimension names in the data set  ds\ndim(ds,name): dimension value corresponding to name\n\n\n\n\n\n","category":"type"},{"location":"#CommonDataModel.AbstractVariable","page":"Home","title":"CommonDataModel.AbstractVariable","text":"AbstractVariable{T,N} is a subclass of AbstractArray{T, N}. A variable v of a type derived from AbstractVariable should implement:\n\nv.attrib: should be a Dict-like data structure with all variable attribute names as keys and the corresponding value\nname(v): should be the name of variable within the dataset\ndimnames(v): should be a iterable data structure with all dimension names of the variable v\n\n\n\n\n\n","category":"type"},{"location":"#Base.size-Tuple{CommonDataModel.CFVariable}","page":"Home","title":"Base.size","text":"sz = size(var::CFVariable)\n\nReturn a tuple of integers with the size of the variable var.\n\nnote: Note\nNote that the size of a variable can change, i.e. for a variable with an unlimited dimension.\n\n\n\n\n\n","category":"method"},{"location":"#CommonDataModel._getattrib-NTuple{5, Any}","page":"Home","title":"CommonDataModel._getattrib","text":"_getattrib(ds,v,parentname,attribname,default)\n\nGet a NetCDF attribute, looking also at the parent variable name (linked via the bounds attribute as following the CF conventions). The default value is returned if the attribute cannot be found.\n\n\n\n\n\n","category":"method"},{"location":"#CommonDataModel.attrib-Tuple{Union{CommonDataModel.AbstractDataset, CommonDataModel.AbstractVariable}, AbstractString}","page":"Home","title":"CommonDataModel.attrib","text":"CommonDatamodel.attrib(ds::Union{AbstractDataset,AbstractVariable},attribname::AbstractString)\n\nReturn the length of the attributes attribname in the data set ds.\n\n\n\n\n\n","category":"method"},{"location":"#CommonDataModel.attribnames-Tuple{Union{CommonDataModel.AbstractDataset, CommonDataModel.AbstractVariable}}","page":"Home","title":"CommonDataModel.attribnames","text":"CommonDatamodel.attribnames(ds::Union{AbstractDataset,AbstractVariable})\n\nReturn an iterable of all attribute names in ds.\n\n\n\n\n\n","category":"method"},{"location":"#CommonDataModel.cfvariable-Tuple{Any, Any}","page":"Home","title":"CommonDataModel.cfvariable","text":"v = cfvariable(ds::NCDataset,varname::AbstractString; <attrib> = <value>)\n\nReturn the NetCDF variable varname in the dataset ds as a NCDataset.CFVariable. The keyword argument <attrib> are the NetCDF attributes (fillvalue, missing_value, scale_factor, add_offset, units and calendar) relevant to the CF conventions. By specifing the value of these attributes, the one can override the value specified in the NetCDF file. If the attribute is set to nothing, then the attribute is not loaded and the corresponding transformation is ignored. This function is similar to ds[varname] with the additional flexibility that some variable attributes can be overridden.\n\nExample:\n\nNCDataset(\"foo.nc\",\"c\") do ds\n  defVar(ds,\"data\",[10., 11., 12., 13.], (\"time\",), attrib = Dict(\n      \"add_offset\" => 10.,\n      \"scale_factor\" => 0.2))\nend\n\n# The stored (packed) valued are [0., 5., 10., 15.]\n# since 0.2 .* [0., 5., 10., 15.] .+ 10 is [10., 11., 12., 13.]\n\nds = NCDataset(\"foo.nc\");\n\n@show ds[\"data\"].var[:]\n# returns [0., 5., 10., 15.]\n\n@show cfvariable(ds,\"data\")[:]\n# returns [10., 11., 12., 13.]\n\n# neither add_offset nor scale_factor are applied\n@show cfvariable(ds,\"data\", add_offset = nothing, scale_factor = nothing)[:]\n# returns [0, 5, 10, 15]\n\n# add_offset is applied but not scale_factor\n@show cfvariable(ds,\"data\", scale_factor = nothing)[:]\n# returns [10, 15, 20, 25]\n\n# 0 is declared as the fill value (add_offset and scale_factor are applied as usual)\n@show cfvariable(ds,\"data\", fillvalue = 0)[:]\n# return [missing, 11., 12., 13.]\n\n# Use the time units: days since 2000-01-01\n@show cfvariable(ds,\"data\", units = \"days since 2000-01-01\")[:]\n# returns [DateTime(2000,1,11), DateTime(2000,1,12), DateTime(2000,1,13), DateTime(2000,1,14)]\n\nclose(ds)\n\n\n\n\n\n","category":"method"},{"location":"#CommonDataModel.dim-Tuple{CommonDataModel.AbstractVariable, AbstractString}","page":"Home","title":"CommonDataModel.dim","text":"CommonDatamodel.dim(ds::AbstractDataset,dimname::AbstractString)\n\nReturn the length of the dimension dimname in the data set ds.\n\n\n\n\n\n","category":"method"},{"location":"#CommonDataModel.dimnames-Tuple{CommonDataModel.AbstractVariable}","page":"Home","title":"CommonDataModel.dimnames","text":"CommonDatamodel.dimnames(v::AbstractVariable)\n\nReturn an iterable of the dimension names of the variable v.\n\n\n\n\n\n","category":"method"},{"location":"#CommonDataModel.dimnames-Tuple{Union{CommonDataModel.AbstractDataset, CommonDataModel.AbstractVariable}}","page":"Home","title":"CommonDataModel.dimnames","text":"CommonDatamodel.dimnames(ds::AbstractDataset)\n\nReturn an iterable of all dimension names in ds.\n\n\n\n\n\n","category":"method"},{"location":"#CommonDataModel.dims-Tuple{Union{CommonDataModel.AbstractDataset, CommonDataModel.AbstractVariable}}","page":"Home","title":"CommonDataModel.dims","text":"CommonDatamodel.dims(ds::Union{AbstractDataset,AbstractVariable})\n\nReturn a dict-like of all dimensions and their corresponding length defined in the the data set ds (or variable).\n\n\n\n\n\n","category":"method"},{"location":"#CommonDataModel.group-Tuple{CommonDataModel.AbstractDataset, AbstractString}","page":"Home","title":"CommonDataModel.group","text":"CommonDatamodel.group(ds::AbstractDataset,groupname::AbstractString)\n\nReturn the sub-group data set with the name groupname.\n\n\n\n\n\n","category":"method"},{"location":"#CommonDataModel.groupnames-Tuple{CommonDataModel.AbstractDataset}","page":"Home","title":"CommonDataModel.groupnames","text":"CommonDatamodel.groupnames(ds::AbstractDataset)\n\nAll the subgroup names of the data set ds. For a data set containing only a single group, this will be an empty vector of String.\n\n\n\n\n\n","category":"method"},{"location":"#CommonDataModel.groups-Tuple{CommonDataModel.AbstractDataset}","page":"Home","title":"CommonDataModel.groups","text":"CommonDatamodel.groups(ds::AbstractDataset)\n\nReturn all sub-group data as a dict-like object.\n\n\n\n\n\n","category":"method"},{"location":"#CommonDataModel.name-Tuple{CommonDataModel.AbstractDataset}","page":"Home","title":"CommonDataModel.name","text":"CommonDatamodel.name(ds::AbstractDataset)\n\nName of the group of the data set ds. For a data set containing only a single group, this will be always the root group \"/\".\n\n\n\n\n\n","category":"method"},{"location":"#CommonDataModel.name-Tuple{CommonDataModel.AbstractVariable}","page":"Home","title":"CommonDataModel.name","text":"CommonDatamodel.name(v::AbstractVariable)\n\nReturn the name of the variable v as a string.\n\n\n\n\n\n","category":"method"},{"location":"#CommonDataModel.path-Tuple{CommonDataModel.AbstractDataset}","page":"Home","title":"CommonDataModel.path","text":"CommonDatamodel.path(ds::AbstractDataset)\n\nFile path of the data set ds.\n\n\n\n\n\n","category":"method"},{"location":"#CommonDataModel.set_attribute_color-Tuple{Symbol}","page":"Home","title":"CommonDataModel.set_attribute_color","text":"    CommonDataModel.set_attribute_color(color::Symbol)\n\nSet the attribute color. The default color is cyan.\n\n\n\n\n\n","category":"method"},{"location":"#CommonDataModel.set_section_color-Tuple{Symbol}","page":"Home","title":"CommonDataModel.set_section_color","text":"    CommonDataModel.set_section_color(color::Symbol)\n\nSet the section color. The default color is red.\n\n\n\n\n\n","category":"method"},{"location":"#CommonDataModel.set_variable_color-Tuple{Symbol}","page":"Home","title":"CommonDataModel.set_variable_color","text":"    CommonDataModel.set_variable_color(color::Symbol)\n\nSet the variable color. The default color is green.\n\n\n\n\n\n","category":"method"},{"location":"#CommonDataModel.show_attrib-Tuple{Any, Any}","page":"Home","title":"CommonDataModel.show_attrib","text":"CommonDatamodel.show_attrib(io,a)\n\nPrint a list all attributes (key/values pairs) in a to IO stream io. The IO property :level is used for indentation.\n\n\n\n\n\n","category":"method"},{"location":"#CommonDataModel.show_dim-Tuple{IO, Any}","page":"Home","title":"CommonDataModel.show_dim","text":"CommonDatamodel.show_dim(io,dim)\n\nPrint a list all dimensions (key/values pairs where key is the dimension names and value the corresponding length) in dim to IO stream io. The IO property :level is used for indentation.\n\n\n\n\n\n","category":"method"},{"location":"#CommonDataModel.time_factor-Tuple{CommonDataModel.CFVariable}","page":"Home","title":"CommonDataModel.time_factor","text":"\"     tf = time_factor(v::CFVariable)\n\nThe time unit in milliseconds. E.g. seconds would be 1000., days would be 86400000. The result can also be nothing if the variable has no time units.\n\n\n\n\n\n","category":"method"},{"location":"#CommonDataModel.unlimited-Tuple{CommonDataModel.AbstractDataset}","page":"Home","title":"CommonDataModel.unlimited","text":"CommonDatamodel.unlimited(ds::AbstractDataset)\n\nIterator of strings with the name of the unlimited dimension.\n\n\n\n\n\n","category":"method"},{"location":"#CommonDataModel.variable-Tuple{CommonDataModel.AbstractDataset, AbstractString}","page":"Home","title":"CommonDataModel.variable","text":"CommonDatamodel.variable(ds::AbstractDataset,variablename::AbstractString)\n\nReturn the variable with the name variablename from the data set ds.\n\n\n\n\n\n","category":"method"},{"location":"#CommonDataModel.varnames-Tuple{CommonDataModel.AbstractDataset}","page":"Home","title":"CommonDataModel.varnames","text":"CommonDatamodel.varnames(ds::AbstractDataset)\n\nReturn an iterable of all the variable name.\n\n\n\n\n\n","category":"method"}]
}
